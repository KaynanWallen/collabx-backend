generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  password     String
  twoFactor    Boolean
  createdAt    DateTime  @default(now())
  lastModified DateTime  @updatedAt
  profiles     Profile[]
}

model Profile {
  id              Int               @id @default(autoincrement())
  accountId       Int
  name            String
  username        String
  title           String
  githubLink      String?
  linkedinLink    String?
  twitterLink     String?
  about           String?
  techs           String?
  followersCount  Int               @default(0)
  followingCount  Int               @default(0)
  createdAt       DateTime          @default(now())
  lastModified    DateTime          @updatedAt
  comments        Comment[]
  commentReaction CommentReaction[]
  imageProject    ImageProject[]
  favorites       Favorite[]
  followers       Follower[]        @relation("ProfileFollowers")
  following       Follower[]        @relation("ProfileFollowing")
  account         Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  projects        Project[]
  reactions       ProjectReaction[]
}

model Project {
  id             Int               @id @default(autoincrement())
  authorId       Int
  title          String
  content        String
  techs          String?
  figmaLink      String?
  githubLink     String?
  linkedinLink   String?
  likeCount      Int               @default(0)
  dislikeCount   Int               @default(0)
  commentCount   Int               @default(0)
  createdAt      DateTime          @default(now())
  lastModified   DateTime          @updatedAt
  comments       Comment[]
  favorites      Favorite[]
  imageProject   ImageProject[]
  author         Profile           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  reactions      ProjectReaction[]
}

model Comment {
  id              Int               @id @default(autoincrement())
  projectId       Int
  authorId        Int
  parentId        Int?
  content         String
  likeCount       Int               @default(0)
  dislikeCount    Int               @default(0)
  commentCount    Int               @default(0)
  createdAt       DateTime          @default(now())
  lastModified    DateTime          @updatedAt
  author          Profile           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent          Comment?          @relation("CommentParent", fields: [parentId], references: [id])
  subComments     Comment[]         @relation("CommentParent")
  project         Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  commentReaction CommentReaction[]
}

model Follower {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())
  follower    Profile  @relation("ProfileFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following   Profile  @relation("ProfileFollowing", fields: [followingId], references: [id], onDelete: Cascade)
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  projectId Int
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      Profile  @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProjectReaction {
  id           Int      @id @default(autoincrement())
  projectId    Int
  authorId     Int
  reactionType String
  createdAt    DateTime @default(now())
  lastModified DateTime @updatedAt
  author       Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model CommentReaction {
  id           Int      @id @default(autoincrement())
  commentId    Int
  authorId     Int
  reactionType String
  createdAt    DateTime @default(now())
  lastModified DateTime @updatedAt
  author       Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comment      Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model ImageProject {
  id             Int              @id @default(autoincrement())
  authorId       Int
  projectId      Int
  cloudflareId   String
  name           String
  type_image     String
  primary_image  Boolean
  createdAt      DateTime         @default(now())
  lastModified   DateTime         @default(now())
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  author      Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
